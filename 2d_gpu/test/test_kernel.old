#ifndef _TEST_KERNEL_H_
#define _TEST_KERNEL_H_

#include <stdio.h>

// Thread block size
#define BLOCK_SIZE 4
#define width 2*2
#define height 2*2

// CUDA kernel
__global__ void TestKernel(double* xd, double* yd, double* Fxd, double* Fyd, double* Gxd, double* Gyd, double* Vxd, double* Vyd, int N)
{
        // 2D thread ID
        int tx = blockIdx.x * blockDim.x + threadIdx.x;
        int ty = blockIdx.y * blockDim.y + threadIdx.y;
	//int tx = threadIdx.x;
	//int ty = threadIdx.y;

	Gxd[tx+ty*N*N] = 2.0f;
	Gyd[tx+ty*N*N] = 3.0f;

	__syncthreads();

	//Vxd[tx] = 0.0f; Vyd[tx] = 0.0f;

	// Sum up rows of matrix
        double vx = 0.0f; double vy = 0.0f;
        if (ty == 0) {
                for(int k=0; k<N*N; k++) {
                   vx += Gxd[tx*N*N+k];
                   vy += Gyd[tx*N*N+k];
                }
                // Write the array to device memory
                Vxd[tx] = vx; Vyd[tx] = vy;
        }
	__syncthreads();
}
#endif // #ifndef _TEST_KERNEL_H
